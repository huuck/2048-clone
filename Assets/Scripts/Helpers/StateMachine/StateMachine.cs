//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
public class StateMachine {
	private VOState 		state;
	private VOState 		lastState;

	private List<VOState> 	states;
	private bool 			verbose;

	public StateMachine (bool verbose) {
		states = new List<VOState>();
		this.verbose = verbose;
	}

	public void Update() {
		state.update();
	}

	public void AddState(int id, List<int> from, VOState.StateChangeDelegate enter, VOState.StateChangeDelegate update, VOState.StateChangeDelegate exit) {
		states.Add(new VOState(id, from, enter, update, exit));
	}

	private VOState getStateByID(int stateID) {
		VOState ret = null;
		int i;
		
		for(i = 0; i < states.Count; i++) {
			if(states[i].id == stateID) {
				ret = states[i];
			}
		}

		return ret;
	}

	public void SetInitialState(int initialStateID) {
		VOState initialState = getStateByID(initialStateID);

		if(initialState == null) {
			if(verbose == true) Debug.Log("[STATE MACHINE] State " + initialStateID + " not found!");
		} else {
			state = initialState;
			state.enter();
		}
	}

	public bool ChangeState(int newStateID) {
		VOState newState = getStateByID(newStateID);

		if(newState == null) {
			if(verbose == true) Debug.Log("[STATE MACHINE] State " + newStateID + " not found!");
			return false;
		}

		if(canChangeTo(newStateID) == false) {
			if(verbose == true) Debug.Log("[STATE MACHINE] Cannot change from state " + state.id + " to " + newStateID);
			return false;
		}

		lastState = state;
		state = newState;

		lastState.exit();
		state.enter();
		if(verbose == true) Debug.Log("[STATE MACHINE] State changed to " + state.id);
		return true;
	}

	private bool canChangeTo(int newStateID) {
		return getStateByID(newStateID).from.IndexOf(state.id) != -1;
	}
}

